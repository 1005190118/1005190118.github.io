<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot打包docker镜像</title>
      <link href="/2019/12/18/SpringBoot%E6%89%93%E5%8C%85docker%E9%95%9C%E5%83%8F/"/>
      <url>/2019/12/18/SpringBoot%E6%89%93%E5%8C%85docker%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title：Spring-Boot打包成docker镜像"><a href="#title：Spring-Boot打包成docker镜像" class="headerlink" title="title：Spring Boot打包成docker镜像"></a>title：Spring Boot打包成docker镜像</h2><h1 id="pom加入依赖"><a href="#pom加入依赖" class="headerlink" title="pom加入依赖"></a>pom加入依赖</h1><pre><code class="xml">&lt;properties&gt;    &lt;docker.image.prefix&gt;xdclass&lt;/docker.image.prefix&gt;&lt;/properties&gt;&lt;build&gt;    &lt;finalName&gt;docker-demo&lt;/finalName&gt;     &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;com.spotify&lt;/groupId&gt;            &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;1.3.6&lt;/version&gt;            &lt;configuration&gt;            &lt;repository&gt;${docker.image.prefix}/${project.artifactId}&lt;/repository&gt;                   &lt;buildArgs&gt;                          &lt;JAR_FILE&gt;target/${project.build.finalName}.jar&lt;/JAR_FILE&gt;                    &lt;/buildArgs&gt;              &lt;/configuration&gt;        &lt;/plugin&gt;     &lt;/plugins&gt;&lt;/build&gt;</code></pre><h1 id="根目录新建Dockerfile"><a href="#根目录新建Dockerfile" class="headerlink" title="根目录新建Dockerfile"></a>根目录新建Dockerfile</h1><pre><code class="dockerfile">FROM openjdk:8-jdk-alpineVOLUME /tmpARG JAR_FILECOPY ${JAR_FILE} app.jarENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</code></pre><h1 id="执行打包命令（再有docker的机器上）"><a href="#执行打包命令（再有docker的机器上）" class="headerlink" title="执行打包命令（再有docker的机器上）"></a>执行打包命令（再有docker的机器上）</h1><blockquote><p>mvn install dockerfile:build</p></blockquote><h1 id="推送阿里云镜像仓库"><a href="#推送阿里云镜像仓库" class="headerlink" title="推送阿里云镜像仓库"></a>推送阿里云镜像仓库</h1><blockquote><p>阿里云镜像仓库：<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cacha缓存</title>
      <link href="/2019/12/18/Cache%E7%BC%93%E5%AD%98/"/>
      <url>/2019/12/18/Cache%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里是使用redis做Mybatis二级缓存</p></blockquote><h1 id="第一步添加依赖"><a href="#第一步添加依赖" class="headerlink" title="第一步添加依赖"></a>第一步添加依赖</h1><pre><code class="xml">          &lt;!-- cache缓存 --&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;          &lt;/dependency&gt;          &lt;!--添加Redis依赖 --&gt;          &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;          &lt;/dependency&gt;</code></pre><h1 id="第二步启动类上添加注解"><a href="#第二步启动类上添加注解" class="headerlink" title="第二步启动类上添加注解"></a>第二步启动类上添加注解</h1><pre><code class="java">  @EnableCaching</code></pre><h1 id="第三步编写RedisConfig"><a href="#第三步编写RedisConfig" class="headerlink" title="第三步编写RedisConfig"></a>第三步编写RedisConfig</h1><pre><code class="java">  @Configuration  public class RedisConfig {      @Bean      public RedisTemplate&lt;String,String&gt; redisTemplate(RedisConnectionFactory factory){          RedisTemplate&lt;String,String&gt; redisTemplate  = new RedisTemplate&lt;&gt;();          redisTemplate.setConnectionFactory(factory);          return redisTemplate;      }      /**       * 生成自定义的key       * @return       */      @Bean(&quot;myKeyGenerator&quot;)      public KeyGenerator MyKeyGenerator() {          return (o, method, objects) -&gt; {              StringBuilder stringBuilder = new StringBuilder();              stringBuilder.append(o.getClass().getSimpleName());              stringBuilder.append(&quot;.&quot;);              stringBuilder.append(method.getName());              stringBuilder.append(&quot;[&quot;);              for (Object obj : objects) {                  stringBuilder.append(obj.toString());              }              stringBuilder.append(&quot;]&quot;);              return stringBuilder.toString();          };      }      @Bean      public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {          return new RedisCacheManager(                  RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory),                  /**                   * 默认策略，未配置的 key 会使用这个                   */                  this.getRedisCacheConfigurationWithTtl(6000),                  /**                   * // 指定 key 策略                   */                  this.getRedisCacheConfigurationMap()          );      }      private Map&lt;String, RedisCacheConfiguration&gt; getRedisCacheConfigurationMap() {          Map&lt;String, RedisCacheConfiguration&gt; redisCacheConfigurationMap = new HashMap&lt;&gt;();          redisCacheConfigurationMap.put(&quot;shmUserInfo&quot;, this.getRedisCacheConfigurationWithTtl(3000));          redisCacheConfigurationMap.put(&quot;UserInfoListAnother&quot;, this.getRedisCacheConfigurationWithTtl(18000));          return redisCacheConfigurationMap;      }      private RedisCacheConfiguration getRedisCacheConfigurationWithTtl(Integer seconds) {          Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.class);          ObjectMapper om = new ObjectMapper();          om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);          om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);          jackson2JsonRedisSerializer.setObjectMapper(om);          RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig();          redisCacheConfiguration = redisCacheConfiguration.serializeValuesWith(                  RedisSerializationContext                          .SerializationPair                          .fromSerializer(jackson2JsonRedisSerializer)          ).entryTtl(Duration.ofSeconds(seconds));          return redisCacheConfiguration;      }  }</code></pre><h1 id="第四步在service上使用"><a href="#第四步在service上使用" class="headerlink" title="第四步在service上使用"></a>第四步在service上使用</h1><blockquote><p><strong>直接在service类上注解</strong>@CacheConfig<strong>指定cacheNames（缓存名称），keyGenerator（key的生成器），cacheManager（那个缓存器），就不用在下面的3中注解上指定了。</strong></p><blockquote><p><strong>3种注解：</strong></p><p><strong>1）：</strong>@Cacheable <strong>用于查找</strong></p><p><strong>2）：</strong>@CachePut <strong>用于增加，更改</strong></p><p><strong>3）：</strong>@CacheEvict <strong>用于删除</strong></p></blockquote></blockquote><p>  示例：</p><pre><code class="java">  @Service  @CacheConfig(cacheNames = &quot;shmUserInfo&quot;)  public class UserServiceImpl implements UserService {      @Resource      private UserMapper userMapper;      /**       * 保存用户信息       * @param user       * @return       */      @Override      @CachePut(key = &quot;&#39;UserServiceImpl.findByPhone[&#39;+#result.phone+&#39;]&#39;&quot;)      public  int saveUser(User user) {          return userMapper.saveUser(user);      }      /**       * 通过手机号查找用户       * @param phone       * @return       */      @Override      @Cacheable(keyGenerator = &quot;myKeyGenerator&quot;)      public User findByPhone(String phone) {          return userMapper.findByPhone(phone);      }      @Override      @Cacheable(keyGenerator = &quot;myKeyGenerator&quot;)      public User findById(Integer id) {          return userMapper.findById(id);      }      /**       * 更改用户信息       * @param user       * @return       */      @Override      @CachePut(key = &quot;&#39;UserServiceImpl.findByPhone[&#39;+#result.phone+&#39;]&#39;&quot;)      public User updateUser(User user) {          userMapper.updateUser(user);          return  user;      }      @Override      @Cacheable(keyGenerator = &quot;myKeyGenerator&quot;)      public List&lt;User&gt; listUser(){          return userMapper.listUser();      }  }  注解详情看B站springboot高级教程，前几章讲的是cache缓存，讲上面3个注解</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
